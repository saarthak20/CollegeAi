from pptx import Presentation
from pptx.util import Pt, Inches
from pptx.dml.color import RGBColor
import re
import os

# ---- THEMES ----
THEMES = {
    "1": {"bg_color": RGBColor(255, 255, 255), "font_color": RGBColor(0, 0, 0), "accent_color": RGBColor(0, 102, 204)},  # Light Blue
    "2": {"bg_color": RGBColor(34, 34, 34), "font_color": RGBColor(255, 255, 255), "accent_color": RGBColor(102, 204, 255)},  # Dark
    "3": {"bg_color": RGBColor(240, 240, 255), "font_color": RGBColor(0, 0, 51), "accent_color": RGBColor(153, 153, 255)},  # Pastel
    "4": {"bg_color": RGBColor(250, 250, 250), "font_color": RGBColor(20, 20, 20), "accent_color": RGBColor(100, 100, 100)},  # Minimal Monochrome
}

def apply_background(slide, color_rgb):
    fill = slide.background.fill
    fill.solid()
    fill.fore_color.rgb = color_rgb

def add_footer(slide, text, font_color):
    left = Inches(0.3)
    top = Inches(6.8)
    width = Inches(9)
    height = Inches(0.3)
    textbox = slide.shapes.add_textbox(left, top, width, height)
    tf = textbox.text_frame
    p = tf.paragraphs[0]
    p.text = text
    p.font.size = Pt(12)
    p.font.color.rgb = font_color

def generate_slides_from_markdown(md_file, theme_choice="1"):
    theme = THEMES.get(theme_choice, THEMES["1"])
    prs = Presentation()
    bullet_slide_layout = prs.slide_layouts[1]

    with open(md_file, 'r', encoding='utf-8') as f:
        content = f.read()

    sections = re.split(r'\n## ', content)
    title_match = re.search(r'# Title: (.+)', sections[0])
    title = title_match.group(1).strip() if title_match else "Lecture"

    # Title slide
    title_slide = prs.slides.add_slide(prs.slide_layouts[0])
    apply_background(title_slide, theme["bg_color"])
    title_slide.shapes.title.text = title
    subtitle = title_slide.placeholders[1]
    subtitle.text = "Generated by collegeAi"
    subtitle.text_frame.paragraphs[0].font.color.rgb = theme["font_color"]
    add_footer(title_slide, "Generated by collegeAi", theme["font_color"])

    for sec in sections[1:]:
        lines = sec.strip().split('\n')
        if not lines:
            continue

        section_title = lines[0].strip()
        content_lines = lines[1:]

        slide = prs.slides.add_slide(bullet_slide_layout)
        apply_background(slide, theme["bg_color"])
        shapes = slide.shapes
        title_shape = shapes.title
        body_shape = shapes.placeholders[1]
        title_shape.text = section_title
        title_shape.text_frame.paragraphs[0].font.color.rgb = theme["accent_color"]

        tf = body_shape.text_frame
        tf.word_wrap = True
        tf.clear()

        for line in content_lines:
            line = line.strip()
            if not line:
                continue
            if line.startswith('-'):
                p = tf.add_paragraph()
                p.text = line[1:].strip()
                p.level = 0
            else:
                p = tf.add_paragraph()
                p.text = line
                p.level = 0
            p.font.size = Pt(20)
            p.font.color.rgb = theme["font_color"]

        add_footer(slide, "Generated by collegeAi", theme["font_color"])

    output_file = md_file.replace('Lecture', 'Slides').replace('.md', '.pptx')

    # Ensure output directory exists
    output_dir = os.path.dirname(output_file)
    if output_dir and not os.path.exists(output_dir):
        os.makedirs(output_dir)

    prs.save(output_file)
    print(f"âœ… Slides saved as {output_file}")

if __name__ == "__main__":
    md_file = input("Enter the path to the lecture markdown file: ").strip()
    print("Choose Theme: 1) Light Blue  2) Dark  3) Pastel  4) Minimal Monochrome")
    theme_choice = input("Enter theme choice (default 1): ").strip() or "1"
    generate_slides_from_markdown(md_file, theme_choice=theme_choice)
